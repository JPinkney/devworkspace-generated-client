{
  "definitions": {
    "v1alpha1.DevWorkspace.spec.template.commands.items.custom.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.env": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
          "type": "object"
        },
        "exposure": {
          "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
          "enum": [
            "public",
            "internal",
            "none"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path of the endpoint URL",
          "type": "string"
        },
        "protocol": {
          "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
          "type": "string"
        },
        "secure": {
          "description": "Describes whether the endpoint should be secured and protected by some authentication process",
          "type": "boolean"
        },
        "targetPort": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask": {
      "description": "Command providing the definition of a VsCode Task \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "inlined": {
          "description": "Inlined content of the VsCode configuration",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Vscode configuration command location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "uri": {
          "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.volumeMounts": {
      "description": "Volume that should be mounted to a component container",
      "properties": {
        "name": {
          "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
          "type": "string"
        },
        "path": {
          "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec": {
      "description": "CLI Command executed in an existing component container",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "commandLine": {
          "description": "The actual command-line string \n Special variables that can be used: \n  - `$PROJECTS_ROOT`: A path where projects sources are mounted \n  - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
          "type": "string"
        },
        "component": {
          "description": "Describes component to which given action relates",
          "type": "string"
        },
        "env": {
          "description": "Optional list of environment variables that have to be set before running the command",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.env"
          },
          "type": "array"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.group"
        },
        "hotReloadCapable": {
          "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own. \n Default value is `false`",
          "type": "boolean"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        },
        "workingDir": {
          "description": "Working directory where the command should be executed \n Special variables that can be used: \n  - `${PROJECTS_ROOT}`: A path where projects sources are mounted \n  - `${PROJECT_SOURCE}`: A path to a project source (${PROJECTS_ROOT}/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.custom": {
      "description": "Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "commandClass": {
          "description": "Class of command that the associated implementation component should use to process this command with the appropriate logic",
          "type": "string"
        },
        "embeddedResource": {
          "description": "Additional free-form configuration for this custom command that the implementation component will know how to use",
          "type": "object",
          "x-kubernetes-embedded-resource": true,
          "x-kubernetes-preserve-unknown-fields": true
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.custom.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        }
      },
      "required": [
        "commandClass",
        "embeddedResource",
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.openshift": {
      "description": "Allows importing into the workspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.",
      "properties": {
        "endpoints": {
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift.endpoints"
          },
          "type": "array"
        },
        "inlined": {
          "description": "Inlined manifest",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Kubernetes-like location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "name": {
          "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
          "type": "string"
        },
        "uri": {
          "description": "Location in a file fetched from a uri.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec": {
      "description": "CLI Command executed in an existing component container",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "commandLine": {
          "description": "The actual command-line string \n Special variables that can be used: \n  - `$PROJECTS_ROOT`: A path where projects sources are mounted \n  - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
          "type": "string"
        },
        "component": {
          "description": "Describes component to which given action relates",
          "type": "string"
        },
        "env": {
          "description": "Optional list of environment variables that have to be set before running the command",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.env"
          },
          "type": "array"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.group"
        },
        "hotReloadCapable": {
          "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own. \n Default value is `false`",
          "type": "boolean"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        },
        "workingDir": {
          "description": "Working directory where the command should be executed \n Special variables that can be used: \n  - `${PROJECTS_ROOT}`: A path where projects sources are mounted \n  - `${PROJECT_SOURCE}`: A path to a project source (${PROJECTS_ROOT}/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom": {
      "description": "Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "commandClass": {
          "description": "Class of command that the associated implementation component should use to process this command with the appropriate logic",
          "type": "string"
        },
        "embeddedResource": {
          "description": "Additional free-form configuration for this custom command that the implementation component will know how to use",
          "type": "object",
          "x-kubernetes-embedded-resource": true,
          "x-kubernetes-preserve-unknown-fields": true
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        }
      },
      "required": [
        "commandClass",
        "embeddedResource",
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift": {
      "description": "Configuration overriding for an OpenShift component in a plugin",
      "properties": {
        "endpoints": {
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints"
          },
          "type": "array"
        },
        "inlined": {
          "description": "Inlined manifest",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Kubernetes-like location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "name": {
          "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
          "type": "string"
        },
        "uri": {
          "description": "Location in a file fetched from a uri.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.volumeMounts": {
      "description": "Volume that should be mounted to a component container",
      "properties": {
        "name": {
          "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
          "type": "string"
        },
        "path": {
          "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
          "type": "object"
        },
        "exposure": {
          "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
          "enum": [
            "public",
            "internal",
            "none"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path of the endpoint URL",
          "type": "string"
        },
        "protocol": {
          "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
          "type": "string"
        },
        "secure": {
          "description": "Describes whether the endpoint should be secured and protected by some authentication process",
          "type": "boolean"
        },
        "targetPort": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.kubernetes": {
      "description": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
          "type": "object"
        },
        "exposure": {
          "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
          "enum": [
            "public",
            "internal",
            "none"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path of the endpoint URL",
          "type": "string"
        },
        "protocol": {
          "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
          "type": "string"
        },
        "secure": {
          "description": "Describes whether the endpoint should be secured and protected by some authentication process",
          "type": "boolean"
        },
        "targetPort": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.github.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "description": "The remote name should be used as init. Required if there are more than one remote configured",
          "type": "string"
        },
        "revision": {
          "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.custom": {
      "description": "Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller",
      "properties": {
        "componentClass": {
          "description": "Class of component that the associated implementation controller should use to process this command with the appropriate logic",
          "type": "string"
        },
        "embeddedResource": {
          "description": "Additional free-form configuration for this custom component that the implementation controller will know how to use",
          "type": "object",
          "x-kubernetes-embedded-resource": true,
          "x-kubernetes-preserve-unknown-fields": true
        },
        "name": {
          "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
          "type": "string"
        }
      },
      "required": [
        "componentClass",
        "embeddedResource",
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.custom": {
      "description": "Project's Custom source",
      "properties": {
        "embeddedResource": {
          "type": "object",
          "x-kubernetes-embedded-resource": true,
          "x-kubernetes-preserve-unknown-fields": true
        },
        "projectSourceClass": {
          "type": "string"
        }
      },
      "required": [
        "embeddedResource",
        "projectSourceClass"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.git": {
      "description": "Project's Git source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.git.checkoutFrom"
        },
        "remotes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
          "type": "object"
        },
        "sparseCheckoutDir": {
          "description": "Part of project to populate in the working directory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.status": {
      "description": "DevWorkspaceStatus defines the observed state of DevWorkspace",
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observations of an object's state",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.status.conditions"
          },
          "type": "array"
        },
        "ideUrl": {
          "description": "URL at which the Worksace Editor can be joined",
          "type": "string"
        },
        "message": {
          "description": "Message is a short user-readable message giving additional information about an object's state",
          "type": "string"
        },
        "phase": {
          "type": "string"
        },
        "workspaceId": {
          "description": "Id of the workspace",
          "type": "string"
        }
      },
      "required": [
        "workspaceId"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands": {
      "properties": {
        "apply": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply"
        },
        "commandType": {
          "description": "Type of workspace command",
          "enum": [
            "Exec",
            "Apply",
            "VscodeTask",
            "VscodeLaunch",
            "Composite",
            "Custom"
          ],
          "type": "string"
        },
        "composite": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom"
        },
        "exec": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec"
        },
        "vscodeLaunch": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch"
        },
        "vscodeTask": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container": {
      "description": "Allows adding and configuring workspace-related containers",
      "properties": {
        "args": {
          "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dedicatedPod": {
          "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. \n Default value is `false`",
          "type": "boolean"
        },
        "endpoints": {
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints"
          },
          "type": "array"
        },
        "env": {
          "description": "Environment variables used in this container",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.env"
          },
          "type": "array"
        },
        "image": {
          "type": "string"
        },
        "memoryLimit": {
          "type": "string"
        },
        "mountSources": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "sourceMapping": {
          "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.",
          "type": "string"
        },
        "volumeMounts": {
          "description": "List of volumes mounts that should be mounted is this container.",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container.volumeMounts"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin": {
      "description": "Allows importing a plugin. \n Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources",
      "properties": {
        "commands": {
          "description": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done using a strategic merge patch",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands"
          },
          "type": "array"
        },
        "components": {
          "description": "Overrides of components encapsulated in a plugin. Overriding is done using a strategic merge patch. A plugin cannot override embedded plugin components.",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components"
          },
          "type": "array"
        },
        "id": {
          "description": "Id in a registry that contains a Devfile yaml file",
          "type": "string"
        },
        "importReferenceType": {
          "description": "type of location from where the referenced template structure should be retrieved",
          "enum": [
            "Uri",
            "Id",
            "Kubernetes"
          ],
          "type": "string"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.kubernetes"
        },
        "name": {
          "description": "Optional name that allows referencing the component in commands, or inside a parent If omitted it will be infered from the location (uri or registryEntry)",
          "type": "string"
        },
        "registryUrl": {
          "type": "string"
        },
        "uri": {
          "description": "Uri of a Devfile yaml file",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands": {
      "properties": {
        "apply": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply"
        },
        "commandType": {
          "description": "Type of workspace command",
          "enum": [
            "Exec",
            "Apply",
            "VscodeTask",
            "VscodeLaunch",
            "Composite",
            "Custom"
          ],
          "type": "string"
        },
        "composite": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom"
        },
        "exec": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec"
        },
        "vscodeLaunch": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch"
        },
        "vscodeTask": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask": {
      "description": "Command providing the definition of a VsCode Task \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "inlined": {
          "description": "Inlined content of the VsCode configuration",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Vscode configuration command location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "uri": {
          "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.apply.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
          "type": "object"
        },
        "exposure": {
          "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
          "enum": [
            "public",
            "internal",
            "none"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path of the endpoint URL",
          "type": "string"
        },
        "protocol": {
          "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
          "type": "string"
        },
        "secure": {
          "description": "Describes whether the endpoint should be secured and protected by some authentication process",
          "type": "boolean"
        },
        "targetPort": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github": {
      "description": "Project's GitHub source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github.checkoutFrom"
        },
        "remotes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
          "type": "object"
        },
        "sparseCheckoutDir": {
          "description": "Part of project to populate in the working directory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.zip": {
      "description": "Project's Zip source",
      "properties": {
        "location": {
          "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
          "type": "string"
        },
        "sparseCheckoutDir": {
          "description": "Part of project to populate in the working directory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.custom": {
      "description": "Project's Custom source",
      "properties": {
        "embeddedResource": {
          "type": "object",
          "x-kubernetes-embedded-resource": true,
          "x-kubernetes-preserve-unknown-fields": true
        },
        "projectSourceClass": {
          "type": "string"
        }
      },
      "required": [
        "embeddedResource",
        "projectSourceClass"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask": {
      "description": "Command providing the definition of a VsCode Task \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "inlined": {
          "description": "Inlined content of the VsCode configuration",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Vscode configuration command location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "uri": {
          "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components": {
      "properties": {
        "componentType": {
          "description": "Type of component",
          "enum": [
            "Container",
            "Kubernetes",
            "Openshift",
            "Volume",
            "Plugin",
            "Custom"
          ],
          "type": "string"
        },
        "container": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.custom"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes"
        },
        "openshift": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.openshift"
        },
        "plugin": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin"
        },
        "volume": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.volume"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container": {
      "description": "Configuration overriding for a Container component in a plugin",
      "properties": {
        "args": {
          "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dedicatedPod": {
          "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. \n Default value is `false`",
          "type": "boolean"
        },
        "endpoints": {
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints"
          },
          "type": "array"
        },
        "env": {
          "description": "Environment variables used in this container",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.env"
          },
          "type": "array"
        },
        "image": {
          "type": "string"
        },
        "memoryLimit": {
          "type": "string"
        },
        "mountSources": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "sourceMapping": {
          "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.",
          "type": "string"
        },
        "volumeMounts": {
          "description": "List of volumes mounts that should be mounted is this container.",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.volumeMounts"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes": {
      "description": "Allows importing into the workspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.",
      "properties": {
        "endpoints": {
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints"
          },
          "type": "array"
        },
        "inlined": {
          "description": "Inlined manifest",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Kubernetes-like location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "name": {
          "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
          "type": "string"
        },
        "uri": {
          "description": "Location in a file fetched from a uri.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.custom": {
      "description": "Project's Custom source",
      "properties": {
        "embeddedResource": {
          "type": "object",
          "x-kubernetes-embedded-resource": true,
          "x-kubernetes-preserve-unknown-fields": true
        },
        "projectSourceClass": {
          "type": "string"
        }
      },
      "required": [
        "embeddedResource",
        "projectSourceClass"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.kubernetes": {
      "description": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.zip": {
      "description": "Project's Zip source",
      "properties": {
        "location": {
          "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
          "type": "string"
        },
        "sparseCheckoutDir": {
          "description": "Part of project to populate in the working directory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects": {
      "properties": {
        "clonePath": {
          "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
          "type": "string"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.custom"
        },
        "git": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.git"
        },
        "github": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.github"
        },
        "name": {
          "description": "Project name",
          "type": "string"
        },
        "sourceType": {
          "description": "Type of project source",
          "enum": [
            "Git",
            "Github",
            "Zip",
            "Custom"
          ],
          "type": "string"
        },
        "zip": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.zip"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.kubernetes": {
      "description": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.custom": {
      "description": "Project's Custom source",
      "properties": {
        "embeddedResource": {
          "type": "object",
          "x-kubernetes-embedded-resource": true,
          "x-kubernetes-preserve-unknown-fields": true
        },
        "projectSourceClass": {
          "type": "string"
        }
      },
      "required": [
        "embeddedResource",
        "projectSourceClass"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.apply": {
      "description": "Command that consists in applying a given component definition, typically bound to a workspace event. \n For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. \n When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "component": {
          "description": "Describes component that will be applied",
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.apply.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git": {
      "description": "Project's Git source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git.checkoutFrom"
        },
        "remotes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
          "type": "object"
        },
        "sparseCheckoutDir": {
          "description": "Part of project to populate in the working directory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply": {
      "description": "Command that consists in applying a given component definition, typically bound to a workspace event. \n For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. \n When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "component": {
          "description": "Describes component that will be applied",
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.apply.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.github.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "description": "The remote name should be used as init. Required if there are more than one remote configured",
          "type": "string"
        },
        "revision": {
          "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch": {
      "description": "Command providing the definition of a VsCode launch action \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "inlined": {
          "description": "Inlined content of the VsCode configuration",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Vscode configuration command location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "uri": {
          "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.zip": {
      "description": "Project's Zip source",
      "properties": {
        "location": {
          "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
          "type": "string"
        },
        "sparseCheckoutDir": {
          "description": "Part of project to populate in the working directory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.exec.env": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace": {
      "description": "DevWorkspace is the Schema for the devworkspaces API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.status"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.events": {
      "description": "Bindings of commands to events. Each command is referred-to by its name.",
      "properties": {
        "postStart": {
          "description": "Names of commands that should be executed after the workspace is completely started. In the case of Che-Theia, these commands should be executed after all plugins and extensions have started, including project cloning. This means that those commands are not triggered until the user opens the IDE in his browser.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "postStop": {
          "description": "Names of commands that should be executed after stopping the workspace.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "preStart": {
          "description": "Names of commands that should be executed before the workspace start. Kubernetes-wise, these commands would typically be executed in init containers of the workspace POD.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "preStop": {
          "description": "Names of commands that should be executed before stopping the workspace.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite": {
      "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "commands": {
          "description": "The commands that comprise this composite command",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        },
        "parallel": {
          "description": "Indicates if the sub-commands should be executed concurrently",
          "type": "boolean"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.github": {
      "description": "Project's GitHub source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.github.checkoutFrom"
        },
        "remotes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
          "type": "object"
        },
        "sparseCheckoutDir": {
          "description": "Part of project to populate in the working directory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec": {
      "description": "CLI Command executed in an existing component container",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "commandLine": {
          "description": "The actual command-line string \n Special variables that can be used: \n  - `$PROJECTS_ROOT`: A path where projects sources are mounted \n  - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
          "type": "string"
        },
        "component": {
          "description": "Describes component to which given action relates",
          "type": "string"
        },
        "env": {
          "description": "Optional list of environment variables that have to be set before running the command",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.env"
          },
          "type": "array"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec.group"
        },
        "hotReloadCapable": {
          "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own. \n Default value is `false`",
          "type": "boolean"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        },
        "workingDir": {
          "description": "Working directory where the command should be executed \n Special variables that can be used: \n  - `${PROJECTS_ROOT}`: A path where projects sources are mounted \n  - `${PROJECT_SOURCE}`: A path to a project source (${PROJECTS_ROOT}/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects": {
      "properties": {
        "clonePath": {
          "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
          "type": "string"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.custom"
        },
        "git": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.git"
        },
        "github": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.github"
        },
        "name": {
          "description": "Project name",
          "type": "string"
        },
        "sourceType": {
          "description": "Type of project source",
          "enum": [
            "Git",
            "Github",
            "Zip",
            "Custom"
          ],
          "type": "string"
        },
        "zip": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.zip"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects": {
      "properties": {
        "clonePath": {
          "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
          "type": "string"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.custom"
        },
        "description": {
          "description": "Description of a starter project",
          "type": "string"
        },
        "git": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git"
        },
        "github": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github"
        },
        "name": {
          "description": "Project name",
          "type": "string"
        },
        "sourceType": {
          "description": "Type of project source",
          "enum": [
            "Git",
            "Github",
            "Zip",
            "Custom"
          ],
          "type": "string"
        },
        "zip": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.zip"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin": {
      "description": "Allows importing a plugin. \n Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources",
      "properties": {
        "commands": {
          "description": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done using a strategic merge patch",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands"
          },
          "type": "array"
        },
        "components": {
          "description": "Overrides of components encapsulated in a plugin. Overriding is done using a strategic merge patch. A plugin cannot override embedded plugin components.",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components"
          },
          "type": "array"
        },
        "id": {
          "description": "Id in a registry that contains a Devfile yaml file",
          "type": "string"
        },
        "importReferenceType": {
          "description": "type of location from where the referenced template structure should be retrieved",
          "enum": [
            "Uri",
            "Id",
            "Kubernetes"
          ],
          "type": "string"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.kubernetes"
        },
        "name": {
          "description": "Optional name that allows referencing the component in commands, or inside a parent If omitted it will be infered from the location (uri or registryEntry)",
          "type": "string"
        },
        "registryUrl": {
          "type": "string"
        },
        "uri": {
          "description": "Uri of a Devfile yaml file",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
          "type": "object"
        },
        "exposure": {
          "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
          "enum": [
            "public",
            "internal",
            "none"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path of the endpoint URL",
          "type": "string"
        },
        "protocol": {
          "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
          "type": "string"
        },
        "secure": {
          "description": "Describes whether the endpoint should be secured and protected by some authentication process",
          "type": "boolean"
        },
        "targetPort": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components": {
      "properties": {
        "componentType": {
          "description": "Type of component",
          "enum": [
            "Container",
            "Kubernetes",
            "Openshift",
            "Volume",
            "Plugin",
            "Custom"
          ],
          "type": "string"
        },
        "container": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.container"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.custom"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes"
        },
        "openshift": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift"
        },
        "plugin": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin"
        },
        "volume": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.volume"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift.endpoints": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
          "type": "object"
        },
        "exposure": {
          "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
          "enum": [
            "public",
            "internal",
            "none"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path of the endpoint URL",
          "type": "string"
        },
        "protocol": {
          "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
          "type": "string"
        },
        "secure": {
          "description": "Describes whether the endpoint should be secured and protected by some authentication process",
          "type": "boolean"
        },
        "targetPort": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.status.conditions": {
      "description": "WorkspaceCondition contains details for the current condition of this workspace.",
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "format": "date-time",
          "type": "string"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Phase is the status of the condition. Can be True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition.",
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec": {
      "description": "DevWorkspaceSpec defines the desired state of DevWorkspace",
      "properties": {
        "routingClass": {
          "type": "string"
        },
        "started": {
          "type": "boolean"
        },
        "template": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template"
        }
      },
      "required": [
        "started"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeTask.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.env": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.endpoints": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
          "type": "object"
        },
        "exposure": {
          "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
          "enum": [
            "public",
            "internal",
            "none"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path of the endpoint URL",
          "type": "string"
        },
        "protocol": {
          "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
          "type": "string"
        },
        "secure": {
          "description": "Describes whether the endpoint should be secured and protected by some authentication process",
          "type": "boolean"
        },
        "targetPort": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.git": {
      "description": "Project's Git source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.git.checkoutFrom"
        },
        "remotes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
          "type": "object"
        },
        "sparseCheckoutDir": {
          "description": "Part of project to populate in the working directory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply": {
      "description": "Command that consists in applying a given component definition, typically bound to a workspace event. \n For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. \n When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "component": {
          "description": "Describes component that will be applied",
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.env": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.github.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "description": "The remote name should be used as init. Required if there are more than one remote configured",
          "type": "string"
        },
        "revision": {
          "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.volume": {
      "description": "Configuration overriding for a Volume component in a plugin",
      "properties": {
        "ephemeral": {
          "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
          "type": "boolean"
        },
        "name": {
          "description": "Mandatory name that allows referencing the Volume component in Container volume mounts or inside a parent",
          "type": "string"
        },
        "size": {
          "description": "Size of the volume",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift": {
      "description": "Configuration overriding for an OpenShift component in a plugin",
      "properties": {
        "endpoints": {
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints"
          },
          "type": "array"
        },
        "inlined": {
          "description": "Inlined manifest",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Kubernetes-like location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "name": {
          "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
          "type": "string"
        },
        "uri": {
          "description": "Location in a file fetched from a uri.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
          "type": "object"
        },
        "exposure": {
          "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
          "enum": [
            "public",
            "internal",
            "none"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path of the endpoint URL",
          "type": "string"
        },
        "protocol": {
          "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
          "type": "string"
        },
        "secure": {
          "description": "Describes whether the endpoint should be secured and protected by some authentication process",
          "type": "boolean"
        },
        "targetPort": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands": {
      "properties": {
        "apply": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.apply"
        },
        "commandType": {
          "description": "Type of workspace command",
          "enum": [
            "Exec",
            "Apply",
            "VscodeTask",
            "VscodeLaunch",
            "Composite",
            "Custom"
          ],
          "type": "string"
        },
        "composite": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.composite"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.custom"
        },
        "exec": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.exec"
        },
        "vscodeLaunch": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch"
        },
        "vscodeTask": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeTask"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent": {
      "description": "Parent workspace template",
      "properties": {
        "commands": {
          "description": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done using a strategic merge patch",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands"
          },
          "type": "array"
        },
        "components": {
          "description": "Overrides of components encapsulated in a parent devfile. Overriding is done using a strategic merge patch",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components"
          },
          "type": "array"
        },
        "id": {
          "description": "Id in a registry that contains a Devfile yaml file",
          "type": "string"
        },
        "importReferenceType": {
          "description": "type of location from where the referenced template structure should be retrieved",
          "enum": [
            "Uri",
            "Id",
            "Kubernetes"
          ],
          "type": "string"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.kubernetes"
        },
        "projects": {
          "description": "Overrides of projects encapsulated in a parent devfile. Overriding is done using a strategic merge patch.",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects"
          },
          "type": "array"
        },
        "registryUrl": {
          "type": "string"
        },
        "starterProjects": {
          "description": "Overrides of starter projects encapsulated in a parent devfile Overriding is done using a strategic merge patch.",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.starterProjects"
          },
          "type": "array"
        },
        "uri": {
          "description": "Uri of a Devfile yaml file",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.zip": {
      "description": "Project's Zip source",
      "properties": {
        "location": {
          "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
          "type": "string"
        },
        "sparseCheckoutDir": {
          "description": "Part of project to populate in the working directory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply": {
      "description": "Command that consists in applying a given component definition, typically bound to a workspace event. \n For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the workspace POD, unless the component has its `dedicatedPod` field set to `true`. \n When no `apply` command exist for a given component, it is assumed the component will be applied at workspace start by default.",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "component": {
          "description": "Describes component that will be applied",
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.env": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.container.volumeMounts": {
      "description": "Volume that should be mounted to a component container",
      "properties": {
        "name": {
          "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
          "type": "string"
        },
        "path": {
          "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.composite": {
      "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "commands": {
          "description": "The commands that comprise this composite command",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.composite.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        },
        "parallel": {
          "description": "Indicates if the sub-commands should be executed concurrently",
          "type": "boolean"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template": {
      "description": "Structure of the workspace. This is also the specification of a workspace template.",
      "properties": {
        "commands": {
          "description": "Predefined, ready-to-use, workspace-related commands",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands"
          },
          "type": "array"
        },
        "components": {
          "description": "List of the workspace components, such as editor and plugins, user-provided containers, or other types of components",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components"
          },
          "type": "array"
        },
        "events": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.events"
        },
        "parent": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent"
        },
        "projects": {
          "description": "Projects worked on in the workspace, containing names and sources locations",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects"
          },
          "type": "array"
        },
        "starterProjects": {
          "description": "StarterProjects is a project that can be used as a starting point when bootstrapping new projects",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.composite.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch": {
      "description": "Command providing the definition of a VsCode launch action \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeLaunch.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "inlined": {
          "description": "Inlined content of the VsCode configuration",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Vscode configuration command location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "uri": {
          "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes": {
      "description": "Configuration overriding for a Kubernetes component in a plugin",
      "properties": {
        "endpoints": {
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes.endpoints"
          },
          "type": "array"
        },
        "inlined": {
          "description": "Inlined manifest",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Kubernetes-like location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "name": {
          "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
          "type": "string"
        },
        "uri": {
          "description": "Location in a file fetched from a uri.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container": {
      "description": "Allows adding and configuring workspace-related containers",
      "properties": {
        "args": {
          "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dedicatedPod": {
          "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. \n Default value is `false`",
          "type": "boolean"
        },
        "endpoints": {
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints"
          },
          "type": "array"
        },
        "env": {
          "description": "Environment variables used in this container",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.env"
          },
          "type": "array"
        },
        "image": {
          "type": "string"
        },
        "memoryLimit": {
          "type": "string"
        },
        "mountSources": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "sourceMapping": {
          "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.",
          "type": "string"
        },
        "volumeMounts": {
          "description": "List of volumes mounts that should be mounted is this container.",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.container.volumeMounts"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.endpoints": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
          "type": "object"
        },
        "exposure": {
          "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
          "enum": [
            "public",
            "internal",
            "none"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path of the endpoint URL",
          "type": "string"
        },
        "protocol": {
          "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
          "type": "string"
        },
        "secure": {
          "description": "Describes whether the endpoint should be secured and protected by some authentication process",
          "type": "boolean"
        },
        "targetPort": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components": {
      "properties": {
        "componentType": {
          "description": "Type of component override for a plugin",
          "enum": [
            "Container",
            "Kubernetes",
            "Openshift",
            "Volume"
          ],
          "type": "string"
        },
        "container": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes"
        },
        "openshift": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.openshift"
        },
        "volume": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.volume"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.kubernetes": {
      "description": "Allows importing into the workspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.",
      "properties": {
        "endpoints": {
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.kubernetes.endpoints"
          },
          "type": "array"
        },
        "inlined": {
          "description": "Inlined manifest",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Kubernetes-like location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "name": {
          "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
          "type": "string"
        },
        "uri": {
          "description": "Location in a file fetched from a uri.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift.endpoints": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
          "type": "object"
        },
        "exposure": {
          "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
          "enum": [
            "public",
            "internal",
            "none"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path of the endpoint URL",
          "type": "string"
        },
        "protocol": {
          "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
          "type": "string"
        },
        "secure": {
          "description": "Describes whether the endpoint should be secured and protected by some authentication process",
          "type": "boolean"
        },
        "targetPort": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask": {
      "description": "Command providing the definition of a VsCode Task \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.vscodeTask.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "inlined": {
          "description": "Inlined content of the VsCode configuration",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Vscode configuration command location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "uri": {
          "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container": {
      "description": "Configuration overriding for a Container component in a plugin",
      "properties": {
        "args": {
          "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dedicatedPod": {
          "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. \n Default value is `false`",
          "type": "boolean"
        },
        "endpoints": {
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.endpoints"
          },
          "type": "array"
        },
        "env": {
          "description": "Environment variables used in this container",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.env"
          },
          "type": "array"
        },
        "image": {
          "type": "string"
        },
        "memoryLimit": {
          "type": "string"
        },
        "mountSources": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "sourceMapping": {
          "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.",
          "type": "string"
        },
        "volumeMounts": {
          "description": "List of volumes mounts that should be mounted is this container.",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.volumeMounts"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch": {
      "description": "Command providing the definition of a VsCode launch action \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "inlined": {
          "description": "Inlined content of the VsCode configuration",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Vscode configuration command location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "uri": {
          "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.custom": {
      "description": "Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller",
      "properties": {
        "componentClass": {
          "description": "Class of component that the associated implementation controller should use to process this command with the appropriate logic",
          "type": "string"
        },
        "embeddedResource": {
          "description": "Additional free-form configuration for this custom component that the implementation controller will know how to use",
          "type": "object",
          "x-kubernetes-embedded-resource": true,
          "x-kubernetes-preserve-unknown-fields": true
        },
        "name": {
          "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
          "type": "string"
        }
      },
      "required": [
        "componentClass",
        "embeddedResource",
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.github": {
      "description": "Project's GitHub source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.github.checkoutFrom"
        },
        "remotes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
          "type": "object"
        },
        "sparseCheckoutDir": {
          "description": "Part of project to populate in the working directory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec": {
      "description": "CLI Command executed in an existing component container",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "commandLine": {
          "description": "The actual command-line string \n Special variables that can be used: \n  - `$PROJECTS_ROOT`: A path where projects sources are mounted \n  - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
          "type": "string"
        },
        "component": {
          "description": "Describes component to which given action relates",
          "type": "string"
        },
        "env": {
          "description": "Optional list of environment variables that have to be set before running the command",
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.env"
          },
          "type": "array"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.group"
        },
        "hotReloadCapable": {
          "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own. \n Default value is `false`",
          "type": "boolean"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        },
        "workingDir": {
          "description": "Working directory where the command should be executed \n Special variables that can be used: \n  - `${PROJECTS_ROOT}`: A path where projects sources are mounted \n  - `${PROJECT_SOURCE}`: A path to a project source (${PROJECTS_ROOT}/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components": {
      "properties": {
        "componentType": {
          "description": "Type of component override for a plugin",
          "enum": [
            "Container",
            "Kubernetes",
            "Openshift",
            "Volume"
          ],
          "type": "string"
        },
        "container": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container"
        },
        "kubernetes": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.kubernetes"
        },
        "openshift": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.openshift"
        },
        "volume": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.volume"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.exec.env": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.volume": {
      "description": "Allows specifying the definition of a volume shared by several other components",
      "properties": {
        "ephemeral": {
          "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
          "type": "boolean"
        },
        "name": {
          "description": "Mandatory name that allows referencing the Volume component in Container volume mounts or inside a parent",
          "type": "string"
        },
        "size": {
          "description": "Size of the volume",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift": {
      "description": "Allows importing into the workspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.",
      "properties": {
        "endpoints": {
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.openshift.endpoints"
          },
          "type": "array"
        },
        "inlined": {
          "description": "Inlined manifest",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Kubernetes-like location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "name": {
          "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
          "type": "string"
        },
        "uri": {
          "description": "Location in a file fetched from a uri.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom": {
      "description": "Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "commandClass": {
          "description": "Class of command that the associated implementation component should use to process this command with the appropriate logic",
          "type": "string"
        },
        "embeddedResource": {
          "description": "Additional free-form configuration for this custom command that the implementation component will know how to use",
          "type": "object",
          "x-kubernetes-embedded-resource": true,
          "x-kubernetes-preserve-unknown-fields": true
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.custom.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        }
      },
      "required": [
        "commandClass",
        "embeddedResource",
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.apply.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.git.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "description": "The remote name should be used as init. Required if there are more than one remote configured",
          "type": "string"
        },
        "revision": {
          "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.container.endpoints": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
          "type": "object"
        },
        "exposure": {
          "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
          "enum": [
            "public",
            "internal",
            "none"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path of the endpoint URL",
          "type": "string"
        },
        "protocol": {
          "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
          "type": "string"
        },
        "secure": {
          "description": "Describes whether the endpoint should be secured and protected by some authentication process",
          "type": "boolean"
        },
        "targetPort": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.container.volumeMounts": {
      "description": "Volume that should be mounted to a component container",
      "properties": {
        "name": {
          "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
          "type": "string"
        },
        "path": {
          "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch": {
      "description": "Command providing the definition of a VsCode launch action \n Deprecated; removed in v1alpha2",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "inlined": {
          "description": "Inlined content of the VsCode configuration",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Vscode configuration command location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "uri": {
          "description": "Location as an absolute of relative URI the VsCode configuration will be fetched from",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec.env": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.exec.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.volume": {
      "description": "Allows specifying the definition of a volume shared by several other components",
      "properties": {
        "ephemeral": {
          "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
          "type": "boolean"
        },
        "name": {
          "description": "Mandatory name that allows referencing the Volume component in Container volume mounts or inside a parent",
          "type": "string"
        },
        "size": {
          "description": "Size of the volume",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands": {
      "properties": {
        "apply": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply"
        },
        "commandType": {
          "description": "Type of workspace command",
          "enum": [
            "Exec",
            "Apply",
            "VscodeTask",
            "VscodeLaunch",
            "Composite",
            "Custom"
          ],
          "type": "string"
        },
        "composite": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.composite"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.custom"
        },
        "exec": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.exec"
        },
        "vscodeLaunch": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeLaunch"
        },
        "vscodeTask": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.vscodeTask"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.git.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "description": "The remote name should be used as init. Required if there are more than one remote configured",
          "type": "string"
        },
        "revision": {
          "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.container.env": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects": {
      "properties": {
        "clonePath": {
          "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
          "type": "string"
        },
        "custom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.custom"
        },
        "description": {
          "description": "Description of a starter project",
          "type": "string"
        },
        "git": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.git"
        },
        "github": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.github"
        },
        "name": {
          "description": "Project name",
          "type": "string"
        },
        "sourceType": {
          "description": "Type of project source",
          "enum": [
            "Git",
            "Github",
            "Zip",
            "Custom"
          ],
          "type": "string"
        },
        "zip": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.starterProjects.items.zip"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom": {
      "description": "Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "commandClass": {
          "description": "Class of command that the associated implementation component should use to process this command with the appropriate logic",
          "type": "string"
        },
        "embeddedResource": {
          "description": "Additional free-form configuration for this custom command that the implementation component will know how to use",
          "type": "object",
          "x-kubernetes-embedded-resource": true,
          "x-kubernetes-preserve-unknown-fields": true
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.custom.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        }
      },
      "required": [
        "commandClass",
        "embeddedResource",
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.components.items.volume": {
      "description": "Configuration overriding for a Volume component in a plugin",
      "properties": {
        "ephemeral": {
          "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
          "type": "boolean"
        },
        "name": {
          "description": "Mandatory name that allows referencing the Volume component in Container volume mounts or inside a parent",
          "type": "string"
        },
        "size": {
          "description": "Size of the volume",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.vscodeLaunch.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.git.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "description": "The remote name should be used as init. Required if there are more than one remote configured",
          "type": "string"
        },
        "revision": {
          "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.starterProjects.items.git.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "description": "The remote name should be used as init. Required if there are more than one remote configured",
          "type": "string"
        },
        "revision": {
          "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.starterProjects.items.github.checkoutFrom": {
      "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
      "properties": {
        "remote": {
          "description": "The remote name should be used as init. Required if there are more than one remote configured",
          "type": "string"
        },
        "revision": {
          "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.projects.items.git": {
      "description": "Project's Git source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.projects.items.git.checkoutFrom"
        },
        "remotes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
          "type": "object"
        },
        "sparseCheckoutDir": {
          "description": "Part of project to populate in the working directory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.commands.items.apply.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite": {
      "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "commands": {
          "description": "The commands that comprise this composite command",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.commands.items.composite.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        },
        "parallel": {
          "description": "Indicates if the sub-commands should be executed concurrently",
          "type": "boolean"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.commands.items.vscodeLaunch.group": {
      "description": "Defines the group this command is part of",
      "properties": {
        "isDefault": {
          "description": "Identifies the default command for a given group kind",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of group the command is part of",
          "enum": [
            "build",
            "run",
            "test",
            "debug"
          ],
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes": {
      "description": "Configuration overriding for a Kubernetes component in a plugin",
      "properties": {
        "endpoints": {
          "items": {
            "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.components.items.plugin.components.items.kubernetes.endpoints"
          },
          "type": "array"
        },
        "inlined": {
          "description": "Inlined manifest",
          "type": "string"
        },
        "locationType": {
          "description": "Type of Kubernetes-like location",
          "enum": [
            "Uri",
            "Inlined"
          ],
          "type": "string"
        },
        "name": {
          "description": "Mandatory name that allows referencing the component in commands, or inside a parent",
          "type": "string"
        },
        "uri": {
          "description": "Location in a file fetched from a uri.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite": {
      "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional map of free-form additional command attributes",
          "type": "object"
        },
        "commands": {
          "description": "The commands that comprise this composite command",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "group": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.parent.components.items.plugin.commands.items.composite.group"
        },
        "id": {
          "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
          "type": "string"
        },
        "label": {
          "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
          "type": "string"
        },
        "parallel": {
          "description": "Indicates if the sub-commands should be executed concurrently",
          "type": "boolean"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.parent.components.items.kubernetes.endpoints": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
          "type": "object"
        },
        "exposure": {
          "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main workspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main workspace POD, on a local address. \n Default value is `public`",
          "enum": [
            "public",
            "internal",
            "none"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "description": "Path of the endpoint URL",
          "type": "string"
        },
        "protocol": {
          "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
          "type": "string"
        },
        "secure": {
          "description": "Describes whether the endpoint should be secured and protected by some authentication process",
          "type": "boolean"
        },
        "targetPort": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1alpha1.DevWorkspace.spec.template.projects.items.github": {
      "description": "Project's GitHub source",
      "properties": {
        "checkoutFrom": {
          "$ref": "#/definitions/v1alpha1.DevWorkspace.spec.template.projects.items.github.checkoutFrom"
        },
        "remotes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The remotes map which should be initialized in the git project. Must have at least one remote configured",
          "type": "object"
        },
        "sparseCheckoutDir": {
          "description": "Part of project to populate in the working directory.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "paths": {
    "/apis/{group}/{version}/namespaces/{namespace}/{plural}": {
      "post": {
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "Creates a namespace scoped Custom object",
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "description": "The JSON schema of the Resource to create.",
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "produces": [
          "application/json"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "operationId": "createNamespacedCustomObject"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "Delete collection of namespace scoped custom objects",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            },
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "integer",
            "name": "gracePeriodSeconds",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately."
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "boolean",
            "name": "orphanDependents",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both."
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "string",
            "name": "propagationPolicy",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy."
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          }
        ],
        "produces": [
          "application/json"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "deleteCollectionNamespacedCustomObject"
      },
      "parameters": [
        {
          "uniqueItems": true,
          "in": "query",
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty"
        },
        {
          "description": "The custom resource's group name",
          "required": true,
          "type": "string",
          "name": "group",
          "in": "path"
        },
        {
          "description": "The custom resource's version",
          "required": true,
          "type": "string",
          "name": "version",
          "in": "path"
        },
        {
          "description": "The custom resource's namespace",
          "required": true,
          "type": "string",
          "name": "namespace",
          "in": "path"
        },
        {
          "description": "The custom resource's plural name. For TPRs this would be lowercase plural kind.",
          "required": true,
          "type": "string",
          "name": "plural",
          "in": "path"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "list or watch namespace scoped custom objects",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "name": "allowWatchBookmarks",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "string",
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "name": "continue"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "integer",
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "name": "limit"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "name": "resourceVersionMatch",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "boolean",
            "name": "watch",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications."
          }
        ],
        "tags": [
          "custom_objects"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "listNamespacedCustomObject"
      }
    },
    "/apis/{group}/{version}/{plural}": {
      "post": {
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "Creates a cluster scoped Custom object",
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "description": "The JSON schema of the Resource to create.",
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "produces": [
          "application/json"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "operationId": "createClusterCustomObject"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "Delete collection of cluster scoped custom objects",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            },
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "integer",
            "name": "gracePeriodSeconds",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately."
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "boolean",
            "name": "orphanDependents",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both."
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "string",
            "name": "propagationPolicy",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy."
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          }
        ],
        "produces": [
          "application/json"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "deleteCollectionClusterCustomObject"
      },
      "parameters": [
        {
          "uniqueItems": true,
          "in": "query",
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty"
        },
        {
          "description": "The custom resource's group name",
          "required": true,
          "type": "string",
          "name": "group",
          "in": "path"
        },
        {
          "description": "The custom resource's version",
          "required": true,
          "type": "string",
          "name": "version",
          "in": "path"
        },
        {
          "description": "The custom resource's plural name. For TPRs this would be lowercase plural kind.",
          "required": true,
          "type": "string",
          "name": "plural",
          "in": "path"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "list or watch cluster scoped custom objects",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "name": "allowWatchBookmarks",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "string",
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "name": "continue"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "integer",
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "name": "limit"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "name": "resourceVersionMatch",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "integer",
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "name": "timeoutSeconds"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "boolean",
            "name": "watch",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications."
          }
        ],
        "tags": [
          "custom_objects"
        ],
        "produces": [
          "application/json",
          "application/json;stream=watch"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "listClusterCustomObject"
      }
    },
    "/apis/{group}/{version}/{plural}/{name}/status": {
      "put": {
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object"
            }
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "replace status of the cluster scoped specified custom object",
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "replaceClusterCustomObjectStatus"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "partially update status of the specified cluster scoped custom object",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "description": "The JSON schema of the Resource to patch."
            },
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "name": "fieldManager",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "name": "force",
            "in": "query"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "operationId": "patchClusterCustomObjectStatus"
      },
      "parameters": [
        {
          "description": "the custom resource's group",
          "required": true,
          "type": "string",
          "name": "group",
          "in": "path"
        },
        {
          "description": "the custom resource's version",
          "required": true,
          "type": "string",
          "name": "version",
          "in": "path"
        },
        {
          "description": "the custom resource's plural name. For TPRs this would be lowercase plural kind.",
          "required": true,
          "type": "string",
          "name": "plural",
          "in": "path"
        },
        {
          "description": "the custom object's name",
          "required": true,
          "type": "string",
          "name": "name",
          "in": "path"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "read status of the specified cluster scoped custom object",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "getClusterCustomObjectStatus"
      }
    },
    "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}": {
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "replace the specified namespace scoped custom object",
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "description": "The JSON schema of the Resource to replace.",
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "produces": [
          "application/json"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "replaceNamespacedCustomObject"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "patch the specified namespace scoped custom object",
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "description": "The JSON schema of the Resource to patch.",
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "name": "fieldManager",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "name": "force",
            "in": "query"
          }
        ],
        "produces": [
          "application/json"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "operationId": "patchNamespacedCustomObject"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "Deletes the specified namespace scoped custom object",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            },
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "integer",
            "name": "gracePeriodSeconds",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately."
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "boolean",
            "name": "orphanDependents",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both."
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "string",
            "name": "propagationPolicy",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy."
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          }
        ],
        "produces": [
          "application/json"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "deleteNamespacedCustomObject"
      },
      "parameters": [
        {
          "description": "the custom resource's group",
          "required": true,
          "type": "string",
          "name": "group",
          "in": "path"
        },
        {
          "description": "the custom resource's version",
          "required": true,
          "type": "string",
          "name": "version",
          "in": "path"
        },
        {
          "description": "The custom resource's namespace",
          "required": true,
          "type": "string",
          "name": "namespace",
          "in": "path"
        },
        {
          "description": "the custom resource's plural name. For TPRs this would be lowercase plural kind.",
          "required": true,
          "type": "string",
          "name": "plural",
          "in": "path"
        },
        {
          "description": "the custom object's name",
          "required": true,
          "type": "string",
          "name": "name",
          "in": "path"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "Returns a namespace scoped custom object",
        "produces": [
          "application/json"
        ],
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "getNamespacedCustomObject"
      }
    },
    "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale": {
      "put": {
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object"
            }
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "replace scale of the specified namespace scoped custom object",
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "replaceNamespacedCustomObjectScale"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "partially update scale of the specified namespace scoped custom object",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "description": "The JSON schema of the Resource to patch."
            },
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "name": "fieldManager",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "name": "force",
            "in": "query"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "operationId": "patchNamespacedCustomObjectScale"
      },
      "parameters": [
        {
          "description": "the custom resource's group",
          "required": true,
          "type": "string",
          "name": "group",
          "in": "path"
        },
        {
          "description": "the custom resource's version",
          "required": true,
          "type": "string",
          "name": "version",
          "in": "path"
        },
        {
          "description": "The custom resource's namespace",
          "required": true,
          "type": "string",
          "name": "namespace",
          "in": "path"
        },
        {
          "description": "the custom resource's plural name. For TPRs this would be lowercase plural kind.",
          "required": true,
          "type": "string",
          "name": "plural",
          "in": "path"
        },
        {
          "description": "the custom object's name",
          "required": true,
          "type": "string",
          "name": "name",
          "in": "path"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "read scale of the specified namespace scoped custom object",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "getNamespacedCustomObjectScale"
      }
    },
    "/apis/{group}/{version}/{plural}/{name}/scale": {
      "put": {
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object"
            }
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "replace scale of the specified cluster scoped custom object",
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "replaceClusterCustomObjectScale"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "partially update scale of the specified cluster scoped custom object",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "description": "The JSON schema of the Resource to patch."
            },
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "name": "fieldManager",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "name": "force",
            "in": "query"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "operationId": "patchClusterCustomObjectScale"
      },
      "parameters": [
        {
          "description": "the custom resource's group",
          "required": true,
          "type": "string",
          "name": "group",
          "in": "path"
        },
        {
          "description": "the custom resource's version",
          "required": true,
          "type": "string",
          "name": "version",
          "in": "path"
        },
        {
          "description": "the custom resource's plural name. For TPRs this would be lowercase plural kind.",
          "required": true,
          "type": "string",
          "name": "plural",
          "in": "path"
        },
        {
          "description": "the custom object's name",
          "required": true,
          "type": "string",
          "name": "name",
          "in": "path"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "read scale of the specified custom object",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "getClusterCustomObjectScale"
      }
    },
    "/apis/{group}/{version}/{plural}/{name}": {
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "replace the specified cluster scoped custom object",
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "description": "The JSON schema of the Resource to replace.",
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "produces": [
          "application/json"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "replaceClusterCustomObject"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "patch the specified cluster scoped custom object",
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "description": "The JSON schema of the Resource to patch.",
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "name": "fieldManager",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "name": "force",
            "in": "query"
          }
        ],
        "produces": [
          "application/json"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json"
        ],
        "operationId": "patchClusterCustomObject"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "Deletes the specified cluster scoped custom object",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/v1.DeleteOptions"
            },
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "integer",
            "name": "gracePeriodSeconds",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately."
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "boolean",
            "name": "orphanDependents",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both."
          },
          {
            "uniqueItems": true,
            "in": "query",
            "type": "string",
            "name": "propagationPolicy",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy."
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          }
        ],
        "produces": [
          "application/json"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "deleteClusterCustomObject"
      },
      "parameters": [
        {
          "description": "the custom resource's group",
          "required": true,
          "type": "string",
          "name": "group",
          "in": "path"
        },
        {
          "description": "the custom resource's version",
          "required": true,
          "type": "string",
          "name": "version",
          "in": "path"
        },
        {
          "description": "the custom object's plural name. For TPRs this would be lowercase plural kind.",
          "required": true,
          "type": "string",
          "name": "plural",
          "in": "path"
        },
        {
          "description": "the custom object's name",
          "required": true,
          "type": "string",
          "name": "name",
          "in": "path"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "A single Resource",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "Returns a cluster scoped custom object",
        "produces": [
          "application/json"
        ],
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "getClusterCustomObject"
      }
    },
    "/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status": {
      "put": {
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object"
            }
          },
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "replace status of the specified namespace scoped custom object",
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "name": "fieldManager",
            "in": "query"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "replaceNamespacedCustomObjectStatus"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "partially update status of the specified namespace scoped custom object",
        "parameters": [
          {
            "schema": {
              "type": "object",
              "description": "The JSON schema of the Resource to patch."
            },
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "name": "dryRun",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "name": "fieldManager",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "name": "force",
            "in": "query"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "x-codegen-request-body-name": "body",
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "operationId": "patchNamespacedCustomObjectStatus"
      },
      "parameters": [
        {
          "description": "the custom resource's group",
          "required": true,
          "type": "string",
          "name": "group",
          "in": "path"
        },
        {
          "description": "the custom resource's version",
          "required": true,
          "type": "string",
          "name": "version",
          "in": "path"
        },
        {
          "description": "The custom resource's namespace",
          "required": true,
          "type": "string",
          "name": "namespace",
          "in": "path"
        },
        {
          "description": "the custom resource's plural name. For TPRs this would be lowercase plural kind.",
          "required": true,
          "type": "string",
          "name": "plural",
          "in": "path"
        },
        {
          "description": "the custom object's name",
          "required": true,
          "type": "string",
          "name": "name",
          "in": "path"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "description": "read status of the specified namespace scoped custom object",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "tags": [
          "custom_objects"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "getNamespacedCustomObjectStatus"
      }
    }
  },
  "info": {
    "title": "Kubernetes",
    "version": "master"
  },
  "swagger": "2.0"
}