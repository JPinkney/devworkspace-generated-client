/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginCommands } from './v1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginCommands';
import { V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponents } from './v1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponents';
import { V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginKubernetes } from './v1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginKubernetes';

/**
* Allows importing a plugin.   Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources
*/
export class V1alpha1DevWorkspaceSpecTemplateComponentsItemsPlugin {
    /**
    * Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done using a strategic merge patch
    */
    'commands'?: Array<V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginCommands>;
    /**
    * Overrides of components encapsulated in a plugin. Overriding is done using a strategic merge patch. A plugin cannot override embedded plugin components.
    */
    'components'?: Array<V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponents>;
    /**
    * Id in a registry that contains a Devfile yaml file
    */
    'id'?: string;
    /**
    * type of location from where the referenced template structure should be retrieved
    */
    'importReferenceType'?: V1alpha1DevWorkspaceSpecTemplateComponentsItemsPlugin.ImportReferenceTypeEnum;
    'kubernetes'?: V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginKubernetes;
    /**
    * Optional name that allows referencing the component in commands, or inside a parent If omitted it will be infered from the location (uri or registryEntry)
    */
    'name'?: string;
    'registryUrl'?: string;
    /**
    * Uri of a Devfile yaml file
    */
    'uri'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "commands",
            "baseName": "commands",
            "type": "Array<V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginCommands>"
        },
        {
            "name": "components",
            "baseName": "components",
            "type": "Array<V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponents>"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "importReferenceType",
            "baseName": "importReferenceType",
            "type": "V1alpha1DevWorkspaceSpecTemplateComponentsItemsPlugin.ImportReferenceTypeEnum"
        },
        {
            "name": "kubernetes",
            "baseName": "kubernetes",
            "type": "V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginKubernetes"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "registryUrl",
            "baseName": "registryUrl",
            "type": "string"
        },
        {
            "name": "uri",
            "baseName": "uri",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V1alpha1DevWorkspaceSpecTemplateComponentsItemsPlugin.attributeTypeMap;
    }
}

export namespace V1alpha1DevWorkspaceSpecTemplateComponentsItemsPlugin {
    export enum ImportReferenceTypeEnum {
        Uri = <any> 'Uri',
        Id = <any> 'Id',
        Kubernetes = <any> 'Kubernetes'
    }
}
