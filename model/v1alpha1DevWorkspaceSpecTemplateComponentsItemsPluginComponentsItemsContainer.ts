/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainerEndpoints } from './v1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainerEndpoints';
import { V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainerEnv } from './v1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainerEnv';
import { V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainerVolumeMounts } from './v1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainerVolumeMounts';

/**
* Configuration overriding for a Container component in a plugin
*/
export class V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainer {
    /**
    * The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.   Defaults to an empty array, meaning use whatever is defined in the image.
    */
    'args'?: Array<string>;
    /**
    * The command to run in the dockerimage component instead of the default one provided in the image.   Defaults to an empty array, meaning use whatever is defined in the image.
    */
    'command'?: Array<string>;
    /**
    * Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.   Default value is `false`
    */
    'dedicatedPod'?: boolean;
    'endpoints'?: Array<V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainerEndpoints>;
    /**
    * Environment variables used in this container
    */
    'env'?: Array<V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainerEnv>;
    'image'?: string;
    'memoryLimit'?: string;
    'mountSources'?: boolean;
    'name': string;
    /**
    * Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the value of the `PROJECTS_ROOT` environment variable is used.
    */
    'sourceMapping'?: string;
    /**
    * List of volumes mounts that should be mounted is this container.
    */
    'volumeMounts'?: Array<V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainerVolumeMounts>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "args",
            "baseName": "args",
            "type": "Array<string>"
        },
        {
            "name": "command",
            "baseName": "command",
            "type": "Array<string>"
        },
        {
            "name": "dedicatedPod",
            "baseName": "dedicatedPod",
            "type": "boolean"
        },
        {
            "name": "endpoints",
            "baseName": "endpoints",
            "type": "Array<V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainerEndpoints>"
        },
        {
            "name": "env",
            "baseName": "env",
            "type": "Array<V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainerEnv>"
        },
        {
            "name": "image",
            "baseName": "image",
            "type": "string"
        },
        {
            "name": "memoryLimit",
            "baseName": "memoryLimit",
            "type": "string"
        },
        {
            "name": "mountSources",
            "baseName": "mountSources",
            "type": "boolean"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "sourceMapping",
            "baseName": "sourceMapping",
            "type": "string"
        },
        {
            "name": "volumeMounts",
            "baseName": "volumeMounts",
            "type": "Array<V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainerVolumeMounts>"
        }    ];

    static getAttributeTypeMap() {
        return V1alpha1DevWorkspaceSpecTemplateComponentsItemsPluginComponentsItemsContainer.attributeTypeMap;
    }
}

